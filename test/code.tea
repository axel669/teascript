fn arraydest {
    args {
        {
            names
            rest
        }
    }

    let parts = do {
        let temp = genJS(names)
        if rest == void
            => temp
        => [...temp, genJS(rest)]
    }

    => "[{parts.join(", ")}]"
}

// let self = this
// fn* test {
//     args {
//         n = 0
//     }

//     if n == 0 {
//         console.log("wat")
//         => -10
//     }
//     if n == 100 {
//         console.log(self)
//         => {wat "woah"}
//     }
//     if n == 10
//         => {nope "wat"}

//     if n < 2
//         => n - 1

//     => n ** 2
// }

// for x : 0 -> 11 {
//     console.log(
//         test(x)
//     )
// }

// let array = [0 -> 100]
// for await num : array {
//     console.log(num)
// }

// [x ** 2 from x : 0 -> 100]
//     .filter(
//         async fn* x => x >= 18
//     )
// async fn* {
//     console.log(
//         await fetch(
//             "test",
//             :headers {
//                 "Content-Type" "text/plain"
//             }
//         )
//         yield thing() + 1
//     )
// }
// let other = {a 10, b 12}

// fetch(
//     "why"
//     :headers {
//         something "cool"
//     }
//     //:cors true
// )

// if !(thing) == false {
//     console.log(
//         10 + -(thing)
//     )
// }

// let y = ?(wat
//     nope
//     maybe()
// )
